<testsuites name="jest tests" tests="40" failures="0" time="12.159">
  <testsuite name="test snapshot of Loading component" errors="0" failures="0" skipped="0" timestamp="2019-02-02T00:26:26" time="8.101" tests="3">
    <testcase classname="test snapshot of Loading component should render the loading screen when loading is true" name="test snapshot of Loading component should render the loading screen when loading is true" time="0.016">
    </testcase>
    <testcase classname="test snapshot of Loading component should render the app when loading is false" name="test snapshot of Loading component should render the app when loading is false" time="0.002">
    </testcase>
    <testcase classname="mapStateToProps should have valid props" name="mapStateToProps should have valid props" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="test snapshot of component" errors="0" failures="0" skipped="0" timestamp="2019-02-02T00:26:26" time="8.216" tests="1">
    <testcase classname="test snapshot of component should render" name="test snapshot of component should render" time="0.018">
    </testcase>
  </testsuite>
  <testsuite name="test snapshot of component" errors="0" failures="0" skipped="0" timestamp="2019-02-02T00:26:26" time="8.317" tests="2">
    <testcase classname="test snapshot of component should render" name="test snapshot of component should render" time="0.025">
    </testcase>
    <testcase classname="mapStateToProps should return valid props" name="mapStateToProps should return valid props" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="test snapshot of component" errors="0" failures="0" skipped="0" timestamp="2019-02-02T00:26:26" time="8.334" tests="1">
    <testcase classname="test snapshot of component should render" name="test snapshot of component should render" time="0.025">
    </testcase>
  </testsuite>
  <testsuite name="describe when the AddTicketDialog Component is given" errors="0" failures="0" skipped="0" timestamp="2019-02-02T00:26:26" time="8.433" tests="3">
    <testcase classname="describe when the AddTicketDialog Component is given open as true AddTicketDialog should show the addTicketDialog open property as true" name="describe when the AddTicketDialog Component is given open as true AddTicketDialog should show the addTicketDialog open property as true" time="0.03">
    </testcase>
    <testcase classname="describe when the AddTicketDialog Component is given open as false AddTicketDialog should show the addTicketDialog open property as false" name="describe when the AddTicketDialog Component is given open as false AddTicketDialog should show the addTicketDialog open property as false" time="0.003">
    </testcase>
    <testcase classname="when a user requests to close addTicket setShowAddTicketDialog should be called with false" name="when a user requests to close addTicket setShowAddTicketDialog should be called with false" time="0.025">
    </testcase>
  </testsuite>
  <testsuite name="when thunkActions is called" errors="0" failures="0" skipped="0" timestamp="2019-02-02T00:26:34" time="0.504" tests="1">
    <testcase classname="when thunkActions is called it should" name="when thunkActions is called it should" time="0.03">
    </testcase>
  </testsuite>
  <testsuite name="describe when the TicketList Component is given" errors="0" failures="0" skipped="0" timestamp="2019-02-02T00:26:26" time="8.907" tests="3">
    <testcase classname="describe when the TicketList Component is given showAddTicketDialog as true TicketList should show the addTicketDialog open as true" name="describe when the TicketList Component is given showAddTicketDialog as true TicketList should show the addTicketDialog open as true" time="0.036">
    </testcase>
    <testcase classname="describe when the TicketList Component is given showAddTicketDialog as false TicketList should show the addTicketDialog open as false" name="describe when the TicketList Component is given showAddTicketDialog as false TicketList should show the addTicketDialog open as false" time="0.004">
    </testcase>
    <testcase classname="when a user requests to close addTicket setShowAddTicketDialog should be called with false" name="when a user requests to close addTicket setShowAddTicketDialog should be called with false" time="0.013">
    </testcase>
  </testsuite>
  <testsuite name="test snapshot of Loading component" errors="0" failures="0" skipped="0" timestamp="2019-02-02T00:26:26" time="9.223" tests="2">
    <testcase classname="test snapshot of Loading component should render the loading screen when loading is true" name="test snapshot of Loading component should render the loading screen when loading is true" time="0.02">
    </testcase>
    <testcase classname="test snapshot of Loading component should render the app when loading is false" name="test snapshot of Loading component should render the app when loading is false" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="when dbMethod is called" errors="0" failures="0" skipped="0" timestamp="2019-02-02T00:26:34" time="1.138" tests="1">
    <testcase classname="when dbMethod is called with no error should work as expected" name="when dbMethod is called with no error should work as expected" time="0.035">
    </testcase>
  </testsuite>
  <testsuite name="when removeFromSprint is called" errors="0" failures="0" skipped="0" timestamp="2019-02-02T00:26:34" time="1.197" tests="1">
    <testcase classname="when removeFromSprint is called with no error should put the new document with sprint false" name="when removeFromSprint is called with no error should put the new document with sprint false" time="0.04">
    </testcase>
  </testsuite>
  <testsuite name="when dbMethod is called" errors="0" failures="0" skipped="0" timestamp="2019-02-02T00:26:34" time="1.178" tests="1">
    <testcase classname="when dbMethod is called with no error should work as expected" name="when dbMethod is called with no error should work as expected" time="0.047">
    </testcase>
  </testsuite>
  <testsuite name="when dbMethod is called" errors="0" failures="0" skipped="0" timestamp="2019-02-02T00:26:34" time="1.145" tests="1">
    <testcase classname="when dbMethod is called with no error should work as expected" name="when dbMethod is called with no error should work as expected" time="0.037">
    </testcase>
  </testsuite>
  <testsuite name="when openCloseSprintDialog is called" errors="0" failures="0" skipped="0" timestamp="2019-02-02T00:26:35" time="0.313" tests="1">
    <testcase classname="when openCloseSprintDialog is called it should" name="when openCloseSprintDialog is called it should" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="test snapshot of component" errors="0" failures="0" skipped="0" timestamp="2019-02-02T00:26:35" time="0.502" tests="1">
    <testcase classname="test snapshot of component should render" name="test snapshot of component should render" time="0.011">
    </testcase>
  </testsuite>
  <testsuite name="when thunkActions is called" errors="0" failures="0" skipped="0" timestamp="2019-02-02T00:26:35" time="0.314" tests="1">
    <testcase classname="when thunkActions is called it should" name="when thunkActions is called it should" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="when dbMethod is called" errors="0" failures="0" skipped="0" timestamp="2019-02-02T00:26:35" time="1.222" tests="1">
    <testcase classname="when dbMethod is called with no error should work as expected" name="when dbMethod is called with no error should work as expected" time="0.221">
    </testcase>
  </testsuite>
  <testsuite name="when dbMethod is called" errors="0" failures="0" skipped="0" timestamp="2019-02-02T00:26:35" time="1.222" tests="1">
    <testcase classname="when dbMethod is called with no error should work as expected" name="when dbMethod is called with no error should work as expected" time="0.071">
    </testcase>
  </testsuite>
  <testsuite name="when deleteTicket is called" errors="0" failures="0" skipped="0" timestamp="2019-02-02T00:26:36" time="0.306" tests="2">
    <testcase classname="when deleteTicket is called it should delete the ticket if no errors" name="when deleteTicket is called it should delete the ticket if no errors" time="0.007">
    </testcase>
    <testcase classname="when deleteTicket is called it should only call getRemoteDb if theres an error getting the remoteDB" name="when deleteTicket is called it should only call getRemoteDb if theres an error getting the remoteDB" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="when removeFromSprint is called" errors="0" failures="0" skipped="0" timestamp="2019-02-02T00:26:36" time="0.391" tests="2">
    <testcase classname="when removeFromSprint is called it should remove the ticket from the sprint if there are no errors" name="when removeFromSprint is called it should remove the ticket from the sprint if there are no errors" time="0.012">
    </testcase>
    <testcase classname="when removeFromSprint is called it should only call getRemoteDb if theres an error getting the remoteDB" name="when removeFromSprint is called it should only call getRemoteDb if theres an error getting the remoteDB" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="when thunkActions is called" errors="0" failures="0" skipped="0" timestamp="2019-02-02T00:26:36" time="0.358" tests="1">
    <testcase classname="when thunkActions is called it should" name="when thunkActions is called it should" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="when dbMethod is called" errors="0" failures="0" skipped="0" timestamp="2019-02-02T00:26:35" time="1.304" tests="1">
    <testcase classname="when dbMethod is called with no error should work as expected" name="when dbMethod is called with no error should work as expected" time="0.06">
    </testcase>
  </testsuite>
  <testsuite name="when openAddTicketDialog is called" errors="0" failures="0" skipped="0" timestamp="2019-02-02T00:26:36" time="0.335" tests="1">
    <testcase classname="when openAddTicketDialog is called should reset the dialog and then open the dialog" name="when openAddTicketDialog is called should reset the dialog and then open the dialog" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="undefined" errors="0" failures="0" skipped="0" timestamp="2019-02-02T00:26:36" time="0.303" tests="1">
    <testcase classname=" should dispatch action" name=" should dispatch action" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="when closeTicket is called" errors="0" failures="0" skipped="0" timestamp="2019-02-02T00:26:36" time="0.323" tests="2">
    <testcase classname="when closeTicket is called it should close the ticket if no errors" name="when closeTicket is called it should close the ticket if no errors" time="0.009">
    </testcase>
    <testcase classname="when closeTicket is called it should only call getRemoteDb if theres an error getting the remoteDB" name="when closeTicket is called it should only call getRemoteDb if theres an error getting the remoteDB" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="when thunkActions is called" errors="0" failures="0" skipped="0" timestamp="2019-02-02T00:26:36" time="0.319" tests="1">
    <testcase classname="when thunkActions is called it should" name="when thunkActions is called it should" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="mapStateToProps" errors="0" failures="0" skipped="0" timestamp="2019-02-02T00:26:36" time="0.825" tests="1">
    <testcase classname="mapStateToProps should return valid props" name="mapStateToProps should return valid props" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="when addTicketToSprint is called" errors="0" failures="0" skipped="0" timestamp="2019-02-02T00:26:36" time="0.275" tests="2">
    <testcase classname="when addTicketToSprint is called it should add the ticket if no errors" name="when addTicketToSprint is called it should add the ticket if no errors" time="0.005">
    </testcase>
    <testcase classname="when addTicketToSprint is called it should only call getRemoteDb if theres an error getting the remoteDB" name="when addTicketToSprint is called it should only call getRemoteDb if theres an error getting the remoteDB" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="when dbMethod is called" errors="0" failures="0" skipped="0" timestamp="2019-02-02T00:26:35" time="1.706" tests="1">
    <testcase classname="when dbMethod is called with no error should work as expected" name="when dbMethod is called with no error should work as expected" time="0.085">
    </testcase>
  </testsuite>
</testsuites>